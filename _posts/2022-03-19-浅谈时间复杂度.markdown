---
title: "算法-浅谈时间复杂度"
layout: post
date: 2022-03-19 22:22
image: /assets/images/markdown.jpg
headerImage: false
tag:
- 时间复杂度
- 时间复杂度计算

category: blog
author: rexma
description: 算法-浅谈时间复杂度
---

### 时间复杂度
时间复杂度在我之前刷leetcode的时候经常不考虑，以至于有时候解出的题目超时了，要想优化程序，时间复杂度的计算是必不可少的。
### 最优、最坏和期望情况
  最优： 就是输入的数据恰巧使得程序执行指令最少次数  
  最坏： 就是输入的数据恰巧使得程序执行指令最多次数  
  期望： 平均复杂度  
  
### 复杂度处理方式
删除常量： 大O仅仅描述了增长的趋势  
丢弃不重要的项：在乎的是更大的  
多项式算法： 如何区分加与乘？ 加： “做这个，结束之后做那个”  乘： "对这个的每个元素做那个”  

### 各种排序算法的时间复杂度

|算法|平均复杂度|最优|最坏|空间复杂度|稳定性|
|---|----|----|----|----|----|
|冒泡排序|On<sup>2</sup>|
|选择排序|On<sup>2</sup>|
|插入排序|On<sup>2</sup>|
|快速排序|nlongn|
|堆排序|nlogn|
|希尔排序|nlogn|
|归并排序|nlogn|
|计数排序|n+k|
|基数排序|N*M|

### 递归
```c++
int sum(Node node) {
  if(node == NULL) {
    return 0;
  }
  return sum(node.left) + node.value + sum(node.right);
}
```
时间复杂度分析： 实际上是遍历了一遍所有节点，对每个节点访问一次，所以是O(n), n是节点数量。  

```c++
int fib(int n) {
  if(n <= 0) return 0;
  else if (n == 1) return 1;
  return fib(n - 1） + fib(n - 2);
}
```
 
O(branches<sup>dep</sup>)
每个调用有两个分支，所以是O(2<sup>N</sup>)

打印所有从0到n的斐波那契数列，时间复杂度？  
```c++
int fib(int n) {
  if(n <= 0) return 0;
  else if (n == 1) return 1;
  return fib(n - 1） + fib(n - 2);
}

void allfib(int n) {
  for (int i = 0; i < n; i++) {
    cout<<fib(i)<<" ";
  }
}
```
并不是n*2<sup>n</sup>  
一个个推倒：  
fib(1) = 2<sup>0</sup>  
fib(2) = 2<sup>1</sup>  
fib(3) = 2<sup>2</sup>  
fib(4) = 2<sup>3</sup>  
...  
fib(n) = 2<sup>n - 1</sup>  

累加： 2<sup>n</sup>  

已经计算过的不再重复计算，那么时间复杂度是多少  
实际上每个数值访问一次，O(n)  

### 复杂排序
遍历字符串数组，取出每个字符串并对其排序，最后排序整个数组，时间复杂度是多少？  

分析： 字符串最大长度为M， 数组长度为N  
排序字符串需要 MlogM, 使用快排， 有N个字符串，因此需要N * MlogM  
排序整个数组时，这里每比较一次并不是O(1), 因为比较字符串是需要比较每个字符串中的字符的，因此每比较一次是O(M)  
所以单说数组排序就是 O(NlongN) * O(M)  
再加上之前字符串排序用的时间， 则为 O（N*MlogM） * O(M*NlogN) = O(M*N(logM + logN));  