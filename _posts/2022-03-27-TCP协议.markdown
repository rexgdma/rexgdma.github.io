---
title: "网络-TCP协议"
layout: post
date: 2022-03-27 8:38
image: /assets/images/markdown.jpg
headerImage: false
tag:
- TCP协议
- 网络

category: blog
author: rexma
description: TCP协议
---

特点： 面向连接、面向字节流、点对点、可靠有序，不丢失不重复、全双工通信   
发送缓存： 准备发送数据 & 已发送但尚未收到确认的数据  
接收缓存： 按序到达但尚未被接收应用程序读取的数据 & 不按序到达的数据  

#### TCP报文格式 
|32字节|  
|源端口|目的端口|  
|序号|  
|确认号|  
|数据偏移|保留|URG|ACK|PSH|RST|SYN|FIN| 窗口|  
|检验和| 紧急指针| ---》 20B 的固定首部  
|选项|充填|  
序号（seq）：在一个 TCP 连接中传送的字节流中的每一个字节都按序编号，本字段表示本报文段所发送数据的第一个字节的序号  
确认号（ack）：期望收到对方下一个报文段的第一个数据字节的序号。如果确认号为 N，则证明到序号 N - 1 为止的所有数据都已正确收到  
数据偏移（首部长度）：TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远，以 4B 为单位，即 1 个数值是 4B  
紧急位 URG：URG = 1 时，表示此报文段中有紧急数据，是高优先级的数据，应尽快传送，不用再缓存里排队，配合紧急指针字段使用  
确认位 ACK：ACK = 1 时确认号有效，在连接建立之后所有传送的报文段都必须把 ACK 置为 1  
推送位 PSH：PSH = 1 时，接收方尽快交付接受应用程序，不再等到缓存填满再向上交付（和紧急位是对应的，紧急位是发送发优先发送，推送位是接收方优先向上交付）  
复位 RST：RST = 1 时，表明 TCP 连接中出现严重差错，必须释放连接，然后再重新建立传输连接  
同步位 SYN：SYN = 1 时，表明是一个连接请求/连接接收报文  
终止位 FIN：FIN = 1 时，表明此报文段发送方数据已发送完，要求释放连接  
窗口：指发送本报文段的一方的接收窗口，即现在允许对方发送的数据量  
检验和：检验首部 + 数据，检验时要加上 12B 伪首部，伪首部第四个字 段是 6  
紧急指针：URG = 1 时才有意义，指出本报文段中紧急数据的字节数  
选项：最大报文段长度 MSS、窗口扩大、时间戳、选择确认......  

#### TCP 连接管理 连接建立-> 数据传送->连接释放  

刚开始客户端处于 closed 状态，服务端处于 listen 状态  
第一次握手：客户端发送连接请求报文段（SYN = 1，seq = x（随机）），无应用层数据。此时客户端处于 SYN_Send （同步发送）状态  
第二次握手：服务端收到客户端的连接请求报文后，为该 TCP 连接分配缓存和变量，并向客户端返回确认报文（SYN = 1，ACK = 1，seq = y（随机），ack = x + 1），允许连接，无应用层数据。此时服务端处于 SYN_REVD（同步接收）状态  
第三次握手：客户端收到连接请求报文后，会发送一个对确认的确认报文（ACK = 1，seq = x + 1，ack = y + 1），可以携带数据。此时客户端处于 established 状态  
服务器收到确认报文后，也会处于 established 状态。此时，双方建立了连接  

#### 三次握手的作用？  

确认双方的接收能力，发送能力是否正常  
指定自己的初始化序列号， 为后面的可靠传输做准备  
#### SYN 洪泛攻击 
攻击者发送TCP三次握手中的第一个包，当服务端返回ACK后，攻击者不对其进行去人，那这个TCP连接就处于挂起状态，半连接状态， 服务器收不到再确认的话会重复发送ACK给攻击者，更浪费服务器资源。 攻击者发送大量的SYN包。  
解决方法：  
服务端扩容（不是好的策略）  
限流同时释放半连接（不是很好的策略）  
延迟任务控制块分配。syn cache ro syn cookie  
SYN cookie:
t : 通过时间戳
s : ip，端口 -> hash得到

通过t,s等生成一个序列号，通过SYN + ACK 返回到客户端， 此时并不开辟TCB（传输控制块）空间
等客户端回复一个ACK时， 用ACK的序号减去1，得到SYN cookie信息。 校验是否跟发送的一致，不一致丢弃。一致开辟TCB资源。建立连接成功。  
#### SYN cookie
设t为一个缓慢增长的时间戳(典型实现是每64s递增一次)  
设m为客户端发送的SYN报文中的MSS选项值  
设s是连接的元组信息(源IP,目的IP,源端口，目的端口)和t经过密码学运算后的Hash值，即s = hash(sip,dip,sport,dport,t)，
s的结果取低 24 位  
则初始序列号n为：
高 5 位为t mod 32  
接下来3位为m的编码值  
低 24 位为s  
#### SYN cookie 缺点
MSS的编码只有3位，因此最多只能使用 8 种MSS值
服务器必须拒绝客户端SYN报文中的其他只在SYN和SYN+ACK中协商的选项，原因是服务器没有地方可以保存这些选项，比如Wscale和SACK
增加了密码学运算